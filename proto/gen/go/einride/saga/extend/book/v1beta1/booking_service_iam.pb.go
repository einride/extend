// Code generated by protoc-gen-go-iam. DO NOT EDIT.
// versions:
// 	protoc            (unknown)

package bookv1beta1

import (
	context "context"
	fmt "fmt"
	iamauthz "go.einride.tech/iam/iamauthz"
	iamcaller "go.einride.tech/iam/iamcaller"
	iamcel "go.einride.tech/iam/iamcel"
	v1 "go.einride.tech/iam/proto/gen/einride/iam/v1"
	proto "google.golang.org/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoregistry "google.golang.org/protobuf/reflect/protoregistry"
)

type BookingServiceIAMDescriptor struct {
	CreateTourAuthorization  *v1.MethodAuthorizationOptions
	GetTourAuthorization     *v1.MethodAuthorizationOptions
	ConfirmTourAuthorization *v1.MethodAuthorizationOptions
	UpdateTourAuthorization  *v1.MethodAuthorizationOptions
}

// NewBookingServiceIAMDescriptor returns a new BookingService IAM descriptor.
func NewBookingServiceIAMDescriptor() (*BookingServiceIAMDescriptor, error) {
	result := BookingServiceIAMDescriptor{
		CreateTourAuthorization:  &v1.MethodAuthorizationOptions{},
		GetTourAuthorization:     &v1.MethodAuthorizationOptions{},
		ConfirmTourAuthorization: &v1.MethodAuthorizationOptions{},
		UpdateTourAuthorization:  &v1.MethodAuthorizationOptions{},
	}
	if err := proto.Unmarshal(
		[]byte{0xa, 0x11, 0x62, 0x6f, 0x6f, 0x6b, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x73, 0x2e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x1a, 0x65, 0xa, 0x1c, 0x74, 0x65, 0x73, 0x74, 0x28, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x29, 0x1a, 0x45, 0x54, 0x68, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20, 0x74, 0x6f, 0x75, 0x72, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e},
		result.CreateTourAuthorization,
	); err != nil {
		return nil, fmt.Errorf("new BookingService IAM descriptor: unmarshal CreateTour method authorization: %w", err)
	}
	if err := proto.Unmarshal(
		[]byte{0xa, 0xe, 0x62, 0x6f, 0x6f, 0x6b, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x73, 0x2e, 0x67, 0x65, 0x74, 0x1a, 0x4d, 0xa, 0x1a, 0x74, 0x65, 0x73, 0x74, 0x28, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x29, 0x1a, 0x2f, 0x54, 0x68, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x67, 0x65, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x6f, 0x75, 0x72},
		result.GetTourAuthorization,
	); err != nil {
		return nil, fmt.Errorf("new BookingService IAM descriptor: unmarshal GetTour method authorization: %w", err)
	}
	if err := proto.Unmarshal(
		[]byte{0xa, 0x12, 0x62, 0x6f, 0x6f, 0x6b, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x73, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x1a, 0x51, 0xa, 0x1a, 0x74, 0x65, 0x73, 0x74, 0x28, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x29, 0x1a, 0x33, 0x54, 0x68, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x6f, 0x75, 0x72},
		result.ConfirmTourAuthorization,
	); err != nil {
		return nil, fmt.Errorf("new BookingService IAM descriptor: unmarshal ConfirmTour method authorization: %w", err)
	}
	if err := proto.Unmarshal(
		[]byte{0xa, 0x11, 0x62, 0x6f, 0x6f, 0x6b, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x73, 0x2e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x1a, 0x54, 0xa, 0x1f, 0x74, 0x65, 0x73, 0x74, 0x28, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x74, 0x6f, 0x75, 0x72, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x29, 0x1a, 0x31, 0x54, 0x68, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20, 0x74, 0x6f, 0x75, 0x72, 0x2e},
		result.UpdateTourAuthorization,
	); err != nil {
		return nil, fmt.Errorf("new BookingService IAM descriptor: unmarshal UpdateTour method authorization: %w", err)
	}
	return &result, nil
}

// NewBookingServiceAuthorization creates a new authorization middleware for BookingService.
func NewBookingServiceAuthorization(
	next BookingServiceServer,
	permissionTester iamcel.PermissionTester,
	callerResolver iamcaller.Resolver,
) (*BookingServiceAuthorization, error) {
	descriptor, err := NewBookingServiceIAMDescriptor()
	if err != nil {
		return nil, fmt.Errorf("new BookingService authorization: %w", err)
	}
	_ = descriptor
	var result BookingServiceAuthorization
	result.next = next
	descriptorCreateTour, err := protoregistry.GlobalFiles.FindDescriptorByName("einride.saga.extend.book.v1beta1.BookingService.CreateTour")
	if err != nil {
		return nil, fmt.Errorf("new BookingService authorization: failed to find descriptor for CreateTour")
	}
	methodCreateTour, ok := descriptorCreateTour.(protoreflect.MethodDescriptor)
	if !ok {
		return nil, fmt.Errorf("new BookingService authorization: got non-method descriptor for CreateTour")
	}
	beforeCreateTour, err := iamauthz.NewBeforeMethodAuthorization(
		methodCreateTour,
		descriptor.CreateTourAuthorization,
		permissionTester,
		callerResolver,
	)
	if err != nil {
		return nil, fmt.Errorf("new BookingService authorization: %w", err)
	}
	result.beforeCreateTour = beforeCreateTour
	descriptorGetTour, err := protoregistry.GlobalFiles.FindDescriptorByName("einride.saga.extend.book.v1beta1.BookingService.GetTour")
	if err != nil {
		return nil, fmt.Errorf("new BookingService authorization: failed to find descriptor for GetTour")
	}
	methodGetTour, ok := descriptorGetTour.(protoreflect.MethodDescriptor)
	if !ok {
		return nil, fmt.Errorf("new BookingService authorization: got non-method descriptor for GetTour")
	}
	beforeGetTour, err := iamauthz.NewBeforeMethodAuthorization(
		methodGetTour,
		descriptor.GetTourAuthorization,
		permissionTester,
		callerResolver,
	)
	if err != nil {
		return nil, fmt.Errorf("new BookingService authorization: %w", err)
	}
	result.beforeGetTour = beforeGetTour
	descriptorConfirmTour, err := protoregistry.GlobalFiles.FindDescriptorByName("einride.saga.extend.book.v1beta1.BookingService.ConfirmTour")
	if err != nil {
		return nil, fmt.Errorf("new BookingService authorization: failed to find descriptor for ConfirmTour")
	}
	methodConfirmTour, ok := descriptorConfirmTour.(protoreflect.MethodDescriptor)
	if !ok {
		return nil, fmt.Errorf("new BookingService authorization: got non-method descriptor for ConfirmTour")
	}
	beforeConfirmTour, err := iamauthz.NewBeforeMethodAuthorization(
		methodConfirmTour,
		descriptor.ConfirmTourAuthorization,
		permissionTester,
		callerResolver,
	)
	if err != nil {
		return nil, fmt.Errorf("new BookingService authorization: %w", err)
	}
	result.beforeConfirmTour = beforeConfirmTour
	descriptorUpdateTour, err := protoregistry.GlobalFiles.FindDescriptorByName("einride.saga.extend.book.v1beta1.BookingService.UpdateTour")
	if err != nil {
		return nil, fmt.Errorf("new BookingService authorization: failed to find descriptor for UpdateTour")
	}
	methodUpdateTour, ok := descriptorUpdateTour.(protoreflect.MethodDescriptor)
	if !ok {
		return nil, fmt.Errorf("new BookingService authorization: got non-method descriptor for UpdateTour")
	}
	beforeUpdateTour, err := iamauthz.NewBeforeMethodAuthorization(
		methodUpdateTour,
		descriptor.UpdateTourAuthorization,
		permissionTester,
		callerResolver,
	)
	if err != nil {
		return nil, fmt.Errorf("new BookingService authorization: %w", err)
	}
	result.beforeUpdateTour = beforeUpdateTour
	return &result, nil
}

type BookingServiceAuthorization struct {
	next              BookingServiceServer
	beforeCreateTour  *iamauthz.BeforeMethodAuthorization
	beforeGetTour     *iamauthz.BeforeMethodAuthorization
	beforeConfirmTour *iamauthz.BeforeMethodAuthorization
	beforeUpdateTour  *iamauthz.BeforeMethodAuthorization
}

func (a *BookingServiceAuthorization) CreateTour(
	ctx context.Context,
	request *CreateTourRequest,
) (*Tour, error) {
	ctx, err := a.beforeCreateTour.AuthorizeRequest(ctx, request)
	if err != nil {
		return nil, err
	}
	return a.next.CreateTour(ctx, request)
}

func (a *BookingServiceAuthorization) GetTour(
	ctx context.Context,
	request *GetTourRequest,
) (*Tour, error) {
	ctx, err := a.beforeGetTour.AuthorizeRequest(ctx, request)
	if err != nil {
		return nil, err
	}
	return a.next.GetTour(ctx, request)
}

func (a *BookingServiceAuthorization) ConfirmTour(
	ctx context.Context,
	request *ConfirmTourRequest,
) (*Tour, error) {
	ctx, err := a.beforeConfirmTour.AuthorizeRequest(ctx, request)
	if err != nil {
		return nil, err
	}
	return a.next.ConfirmTour(ctx, request)
}

func (a *BookingServiceAuthorization) UpdateTour(
	ctx context.Context,
	request *UpdateTourRequest,
) (*Tour, error) {
	ctx, err := a.beforeUpdateTour.AuthorizeRequest(ctx, request)
	if err != nil {
		return nil, err
	}
	return a.next.UpdateTour(ctx, request)
}
