// Code generated by protoc-gen-go-aip-test. DO NOT EDIT.

package bookv1beta1

import (
	context "context"
	cmpopts "github.com/google/go-cmp/cmp/cmpopts"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protocmp "google.golang.org/protobuf/testing/protocmp"
	assert "gotest.tools/v3/assert"
	strings "strings"
	testing "testing"
	time "time"
)

type ShipmentTrackingEventServiceTestSuite struct {
	T *testing.T
	// Server to test.
	Server ShipmentTrackingEventServiceServer
}

func (fx ShipmentTrackingEventServiceTestSuite) TestShipmentTrackingEvent(ctx context.Context, options ShipmentTrackingEventTestSuiteConfig) {
	fx.T.Run("ShipmentTrackingEvent", func(t *testing.T) {
		options.ctx = ctx
		options.service = fx.Server
		options.test(t)
	})
}

type ShipmentTrackingEventTestSuiteConfig struct {
	ctx        context.Context
	service    ShipmentTrackingEventServiceServer
	currParent int

	// The parents to use when creating resources.
	// At least one parent needs to be set. Depending on methods available on the resource,
	// more may be required. If insufficient number of parents are
	// provided the test will fail.
	Parents []string
	// Create should return a resource which is valid to create, i.e.
	// all required fields set.
	Create func(parent string) *ShipmentTrackingEvent
	// Patterns of tests to skip.
	// For example if a service has a Get method:
	// Skip: ["Get"] will skip all tests for Get.
	// Skip: ["Get/persisted"] will only skip the subtest called "persisted" of Get.
	Skip []string
}

func (fx *ShipmentTrackingEventTestSuiteConfig) test(t *testing.T) {
	t.Run("Create", fx.testCreate)
	t.Run("Get", fx.testGet)
	t.Run("List", fx.testList)
}

func (fx *ShipmentTrackingEventTestSuiteConfig) testCreate(t *testing.T) {
	fx.maybeSkip(t)
	// Method should fail with InvalidArgument if no parent is provided.
	t.Run("missing parent", func(t *testing.T) {
		fx.maybeSkip(t)
		_, err := fx.service.CreateShipmentTrackingEvent(fx.ctx, &CreateShipmentTrackingEventRequest{
			Parent:                "",
			ShipmentTrackingEvent: fx.Create(fx.nextParent(t, false)),
		})
		assert.Equal(t, codes.InvalidArgument, status.Code(err), err)
	})

	// Method should fail with InvalidArgument if provided parent is invalid.
	t.Run("invalid parent", func(t *testing.T) {
		fx.maybeSkip(t)
		_, err := fx.service.CreateShipmentTrackingEvent(fx.ctx, &CreateShipmentTrackingEventRequest{
			Parent:                "invalid resource name",
			ShipmentTrackingEvent: fx.Create(fx.nextParent(t, false)),
		})
		assert.Equal(t, codes.InvalidArgument, status.Code(err), err)
	})

	// Field create_time should be populated when the resource is created.
	t.Run("create time", func(t *testing.T) {
		fx.maybeSkip(t)
		parent := fx.nextParent(t, false)
		msg, err := fx.service.CreateShipmentTrackingEvent(fx.ctx, &CreateShipmentTrackingEventRequest{
			Parent:                parent,
			ShipmentTrackingEvent: fx.Create(parent),
		})
		assert.NilError(t, err)
		assert.Check(t, time.Since(msg.CreateTime.AsTime()) < time.Second)
	})

	// The created resource should be persisted and reachable with Get.
	t.Run("persisted", func(t *testing.T) {
		fx.maybeSkip(t)
		parent := fx.nextParent(t, false)
		msg, err := fx.service.CreateShipmentTrackingEvent(fx.ctx, &CreateShipmentTrackingEventRequest{
			Parent:                parent,
			ShipmentTrackingEvent: fx.Create(parent),
		})
		assert.NilError(t, err)
		persisted, err := fx.service.GetShipmentTrackingEvent(fx.ctx, &GetShipmentTrackingEventRequest{
			Name: msg.Name,
		})
		assert.NilError(t, err)
		assert.DeepEqual(t, msg, persisted, protocmp.Transform())
	})

	// The method should fail with InvalidArgument if the resource has any
	// required fields and they are not provided.
	t.Run("required fields", func(t *testing.T) {
		fx.maybeSkip(t)
		t.Run(".code", func(t *testing.T) {
			fx.maybeSkip(t)
			parent := fx.nextParent(t, false)
			msg := fx.Create(parent)
			container := msg
			if container == nil {
				t.Skip("not reachable")
			}
			fd := container.ProtoReflect().Descriptor().Fields().ByName("code")
			container.ProtoReflect().Clear(fd)
			_, err := fx.service.CreateShipmentTrackingEvent(fx.ctx, &CreateShipmentTrackingEventRequest{
				Parent:                parent,
				ShipmentTrackingEvent: msg,
			})
			assert.Equal(t, codes.InvalidArgument, status.Code(err), err)
		})
		t.Run(".occurred_time", func(t *testing.T) {
			fx.maybeSkip(t)
			parent := fx.nextParent(t, false)
			msg := fx.Create(parent)
			container := msg
			if container == nil {
				t.Skip("not reachable")
			}
			fd := container.ProtoReflect().Descriptor().Fields().ByName("occurred_time")
			container.ProtoReflect().Clear(fd)
			_, err := fx.service.CreateShipmentTrackingEvent(fx.ctx, &CreateShipmentTrackingEventRequest{
				Parent:                parent,
				ShipmentTrackingEvent: msg,
			})
			assert.Equal(t, codes.InvalidArgument, status.Code(err), err)
		})
		t.Run(".address.recipient", func(t *testing.T) {
			fx.maybeSkip(t)
			parent := fx.nextParent(t, false)
			msg := fx.Create(parent)
			container := msg.GetAddress()
			if container == nil {
				t.Skip("not reachable")
			}
			fd := container.ProtoReflect().Descriptor().Fields().ByName("recipient")
			container.ProtoReflect().Clear(fd)
			_, err := fx.service.CreateShipmentTrackingEvent(fx.ctx, &CreateShipmentTrackingEventRequest{
				Parent:                parent,
				ShipmentTrackingEvent: msg,
			})
			assert.Equal(t, codes.InvalidArgument, status.Code(err), err)
		})
		t.Run(".address.line1", func(t *testing.T) {
			fx.maybeSkip(t)
			parent := fx.nextParent(t, false)
			msg := fx.Create(parent)
			container := msg.GetAddress()
			if container == nil {
				t.Skip("not reachable")
			}
			fd := container.ProtoReflect().Descriptor().Fields().ByName("line1")
			container.ProtoReflect().Clear(fd)
			_, err := fx.service.CreateShipmentTrackingEvent(fx.ctx, &CreateShipmentTrackingEventRequest{
				Parent:                parent,
				ShipmentTrackingEvent: msg,
			})
			assert.Equal(t, codes.InvalidArgument, status.Code(err), err)
		})
		t.Run(".address.postal_code", func(t *testing.T) {
			fx.maybeSkip(t)
			parent := fx.nextParent(t, false)
			msg := fx.Create(parent)
			container := msg.GetAddress()
			if container == nil {
				t.Skip("not reachable")
			}
			fd := container.ProtoReflect().Descriptor().Fields().ByName("postal_code")
			container.ProtoReflect().Clear(fd)
			_, err := fx.service.CreateShipmentTrackingEvent(fx.ctx, &CreateShipmentTrackingEventRequest{
				Parent:                parent,
				ShipmentTrackingEvent: msg,
			})
			assert.Equal(t, codes.InvalidArgument, status.Code(err), err)
		})
		t.Run(".address.city", func(t *testing.T) {
			fx.maybeSkip(t)
			parent := fx.nextParent(t, false)
			msg := fx.Create(parent)
			container := msg.GetAddress()
			if container == nil {
				t.Skip("not reachable")
			}
			fd := container.ProtoReflect().Descriptor().Fields().ByName("city")
			container.ProtoReflect().Clear(fd)
			_, err := fx.service.CreateShipmentTrackingEvent(fx.ctx, &CreateShipmentTrackingEventRequest{
				Parent:                parent,
				ShipmentTrackingEvent: msg,
			})
			assert.Equal(t, codes.InvalidArgument, status.Code(err), err)
		})
		t.Run(".address.region_code", func(t *testing.T) {
			fx.maybeSkip(t)
			parent := fx.nextParent(t, false)
			msg := fx.Create(parent)
			container := msg.GetAddress()
			if container == nil {
				t.Skip("not reachable")
			}
			fd := container.ProtoReflect().Descriptor().Fields().ByName("region_code")
			container.ProtoReflect().Clear(fd)
			_, err := fx.service.CreateShipmentTrackingEvent(fx.ctx, &CreateShipmentTrackingEventRequest{
				Parent:                parent,
				ShipmentTrackingEvent: msg,
			})
			assert.Equal(t, codes.InvalidArgument, status.Code(err), err)
		})
	})

}

func (fx *ShipmentTrackingEventTestSuiteConfig) testGet(t *testing.T) {
	fx.maybeSkip(t)
	// Method should fail with InvalidArgument if no name is provided.
	t.Run("missing name", func(t *testing.T) {
		fx.maybeSkip(t)
		_, err := fx.service.GetShipmentTrackingEvent(fx.ctx, &GetShipmentTrackingEventRequest{
			Name: "",
		})
		assert.Equal(t, codes.InvalidArgument, status.Code(err), err)
	})

	// Method should fail with InvalidArgument if the provided name is not valid.
	t.Run("invalid name", func(t *testing.T) {
		fx.maybeSkip(t)
		_, err := fx.service.GetShipmentTrackingEvent(fx.ctx, &GetShipmentTrackingEventRequest{
			Name: "invalid resource name",
		})
		assert.Equal(t, codes.InvalidArgument, status.Code(err), err)
	})

	// Resource should be returned without errors if it exists.
	t.Run("exists", func(t *testing.T) {
		fx.maybeSkip(t)
		parent := fx.nextParent(t, false)
		created := fx.create(t, parent)
		msg, err := fx.service.GetShipmentTrackingEvent(fx.ctx, &GetShipmentTrackingEventRequest{
			Name: created.Name,
		})
		assert.NilError(t, err)
		assert.DeepEqual(t, msg, created, protocmp.Transform())
	})

	// Method should fail with NotFound if the resource does not exist.
	t.Run("not found", func(t *testing.T) {
		fx.maybeSkip(t)
		parent := fx.nextParent(t, false)
		created := fx.create(t, parent)
		_, err := fx.service.GetShipmentTrackingEvent(fx.ctx, &GetShipmentTrackingEventRequest{
			Name: created.Name + "notfound",
		})
		assert.Equal(t, codes.NotFound, status.Code(err), err)
	})

	// Method should fail with InvalidArgument if the provided name only contains wildcards ('-')
	t.Run("only wildcards", func(t *testing.T) {
		fx.maybeSkip(t)
		_, err := fx.service.GetShipmentTrackingEvent(fx.ctx, &GetShipmentTrackingEventRequest{
			Name: "spaces/-/shipments/-/trackingEvents/-",
		})
		assert.Equal(t, codes.InvalidArgument, status.Code(err), err)
	})

}

func (fx *ShipmentTrackingEventTestSuiteConfig) testList(t *testing.T) {
	fx.maybeSkip(t)
	// Method should fail with InvalidArgument if provided parent is invalid.
	t.Run("invalid parent", func(t *testing.T) {
		fx.maybeSkip(t)
		_, err := fx.service.ListShipmentTrackingEvents(fx.ctx, &ListShipmentTrackingEventsRequest{
			Parent: "invalid resource name",
		})
		assert.Equal(t, codes.InvalidArgument, status.Code(err), err)
	})

	// Method should fail with InvalidArgument is provided page token is not valid.
	t.Run("invalid page token", func(t *testing.T) {
		fx.maybeSkip(t)
		parent := fx.nextParent(t, false)
		_, err := fx.service.ListShipmentTrackingEvents(fx.ctx, &ListShipmentTrackingEventsRequest{
			Parent:    parent,
			PageToken: "invalid page token",
		})
		assert.Equal(t, codes.InvalidArgument, status.Code(err), err)
	})

	// Method should fail with InvalidArgument is provided page size is negative.
	t.Run("negative page size", func(t *testing.T) {
		fx.maybeSkip(t)
		parent := fx.nextParent(t, false)
		_, err := fx.service.ListShipmentTrackingEvents(fx.ctx, &ListShipmentTrackingEventsRequest{
			Parent:   parent,
			PageSize: -10,
		})
		assert.Equal(t, codes.InvalidArgument, status.Code(err), err)
	})

	const resourcesCount = 15
	parent := fx.nextParent(t, true)
	parentMsgs := make([]*ShipmentTrackingEvent, resourcesCount)
	for i := 0; i < resourcesCount; i++ {
		parentMsgs[i] = fx.create(t, parent)
	}

	// If parent is provided the method must only return resources
	// under that parent.
	t.Run("isolation", func(t *testing.T) {
		fx.maybeSkip(t)
		response, err := fx.service.ListShipmentTrackingEvents(fx.ctx, &ListShipmentTrackingEventsRequest{
			Parent:   parent,
			PageSize: 999,
		})
		assert.NilError(t, err)
		assert.DeepEqual(
			t,
			parentMsgs,
			response.ShipmentTrackingEvents,
			cmpopts.SortSlices(func(a, b *ShipmentTrackingEvent) bool {
				return a.Name < b.Name
			}),
			protocmp.Transform(),
		)
	})

	// If there are no more resources, next_page_token should not be set.
	t.Run("last page", func(t *testing.T) {
		fx.maybeSkip(t)
		response, err := fx.service.ListShipmentTrackingEvents(fx.ctx, &ListShipmentTrackingEventsRequest{
			Parent:   parent,
			PageSize: resourcesCount,
		})
		assert.NilError(t, err)
		assert.Equal(t, "", response.NextPageToken)
	})

	// If there are more resources, next_page_token should be set.
	t.Run("more pages", func(t *testing.T) {
		fx.maybeSkip(t)
		response, err := fx.service.ListShipmentTrackingEvents(fx.ctx, &ListShipmentTrackingEventsRequest{
			Parent:   parent,
			PageSize: resourcesCount - 1,
		})
		assert.NilError(t, err)
		assert.Check(t, response.NextPageToken != "")
	})

	// Listing resource one by one should eventually return all resources.
	t.Run("one by one", func(t *testing.T) {
		fx.maybeSkip(t)
		msgs := make([]*ShipmentTrackingEvent, 0, resourcesCount)
		var nextPageToken string
		for {
			response, err := fx.service.ListShipmentTrackingEvents(fx.ctx, &ListShipmentTrackingEventsRequest{
				Parent:    parent,
				PageSize:  1,
				PageToken: nextPageToken,
			})
			assert.NilError(t, err)
			assert.Equal(t, 1, len(response.ShipmentTrackingEvents))
			msgs = append(msgs, response.ShipmentTrackingEvents...)
			nextPageToken = response.NextPageToken
			if nextPageToken == "" {
				break
			}
		}
		assert.DeepEqual(
			t,
			parentMsgs,
			msgs,
			cmpopts.SortSlices(func(a, b *ShipmentTrackingEvent) bool {
				return a.Name < b.Name
			}),
			protocmp.Transform(),
		)
	})

}

func (fx *ShipmentTrackingEventTestSuiteConfig) nextParent(t *testing.T, pristine bool) string {
	if pristine {
		fx.currParent++
	}
	if fx.currParent >= len(fx.Parents) {
		t.Fatal("need at least", fx.currParent+1, "parents")
	}
	return fx.Parents[fx.currParent]
}

func (fx *ShipmentTrackingEventTestSuiteConfig) peekNextParent(t *testing.T) string {
	next := fx.currParent + 1
	if next >= len(fx.Parents) {
		t.Fatal("need at least", next+1, "parents")
	}
	return fx.Parents[next]
}

func (fx *ShipmentTrackingEventTestSuiteConfig) maybeSkip(t *testing.T) {
	for _, skip := range fx.Skip {
		if strings.Contains(t.Name(), skip) {
			t.Skip("skipped because of .Skip")
		}
	}
}

func (fx *ShipmentTrackingEventTestSuiteConfig) create(t *testing.T, parent string) *ShipmentTrackingEvent {
	t.Helper()
	created, err := fx.service.CreateShipmentTrackingEvent(fx.ctx, &CreateShipmentTrackingEventRequest{
		Parent:                parent,
		ShipmentTrackingEvent: fx.Create(parent),
	})
	assert.NilError(t, err)
	return created
}
