// Code generated by protoc-gen-go-iam. DO NOT EDIT.
// versions:
// 	protoc            (unknown)

package bookv1beta1

import (
	context "context"
	fmt "fmt"
	iamauthz "go.einride.tech/iam/iamauthz"
	iamcaller "go.einride.tech/iam/iamcaller"
	iamcel "go.einride.tech/iam/iamcel"
	v1 "go.einride.tech/iam/proto/gen/einride/iam/v1"
	proto "google.golang.org/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoregistry "google.golang.org/protobuf/reflect/protoregistry"
)

type ShipmentServiceIAMDescriptor struct {
	CreateShipmentAuthorization  *v1.MethodAuthorizationOptions
	GetShipmentAuthorization     *v1.MethodAuthorizationOptions
	ReleaseShipmentAuthorization *v1.MethodAuthorizationOptions
	CancelShipmentAuthorization  *v1.MethodAuthorizationOptions
	UpdateShipmentAuthorization  *v1.MethodAuthorizationOptions
}

// NewShipmentServiceIAMDescriptor returns a new ShipmentService IAM descriptor.
func NewShipmentServiceIAMDescriptor() (*ShipmentServiceIAMDescriptor, error) {
	result := ShipmentServiceIAMDescriptor{
		CreateShipmentAuthorization:  &v1.MethodAuthorizationOptions{},
		GetShipmentAuthorization:     &v1.MethodAuthorizationOptions{},
		ReleaseShipmentAuthorization: &v1.MethodAuthorizationOptions{},
		CancelShipmentAuthorization:  &v1.MethodAuthorizationOptions{},
		UpdateShipmentAuthorization:  &v1.MethodAuthorizationOptions{},
	}
	if err := proto.Unmarshal(
		[]byte{0xa, 0x15, 0x62, 0x6f, 0x6f, 0x6b, 0x2e, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x1a, 0x69, 0xa, 0x1c, 0x74, 0x65, 0x73, 0x74, 0x28, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x29, 0x1a, 0x49, 0x54, 0x68, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e},
		result.CreateShipmentAuthorization,
	); err != nil {
		return nil, fmt.Errorf("new ShipmentService IAM descriptor: unmarshal CreateShipment method authorization: %w", err)
	}
	if err := proto.Unmarshal(
		[]byte{0xa, 0x12, 0x62, 0x6f, 0x6f, 0x6b, 0x2e, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x67, 0x65, 0x74, 0x1a, 0x51, 0xa, 0x1a, 0x74, 0x65, 0x73, 0x74, 0x28, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x29, 0x1a, 0x33, 0x54, 0x68, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x67, 0x65, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74},
		result.GetShipmentAuthorization,
	); err != nil {
		return nil, fmt.Errorf("new ShipmentService IAM descriptor: unmarshal GetShipment method authorization: %w", err)
	}
	if err := proto.Unmarshal(
		[]byte{0xa, 0x16, 0x62, 0x6f, 0x6f, 0x6b, 0x2e, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x1a, 0x52, 0xa, 0x1a, 0x74, 0x65, 0x73, 0x74, 0x28, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x29, 0x1a, 0x34, 0x54, 0x68, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e},
		result.ReleaseShipmentAuthorization,
	); err != nil {
		return nil, fmt.Errorf("new ShipmentService IAM descriptor: unmarshal ReleaseShipment method authorization: %w", err)
	}
	if err := proto.Unmarshal(
		[]byte{0xa, 0x15, 0x62, 0x6f, 0x6f, 0x6b, 0x2e, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x1a, 0x51, 0xa, 0x1a, 0x74, 0x65, 0x73, 0x74, 0x28, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x29, 0x1a, 0x33, 0x54, 0x68, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x20, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e},
		result.CancelShipmentAuthorization,
	); err != nil {
		return nil, fmt.Errorf("new ShipmentService IAM descriptor: unmarshal CancelShipment method authorization: %w", err)
	}
	if err := proto.Unmarshal(
		[]byte{0xa, 0x15, 0x62, 0x6f, 0x6f, 0x6b, 0x2e, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x1a, 0x5e, 0xa, 0x23, 0x74, 0x65, 0x73, 0x74, 0x28, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x29, 0x1a, 0x37, 0x54, 0x68, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e},
		result.UpdateShipmentAuthorization,
	); err != nil {
		return nil, fmt.Errorf("new ShipmentService IAM descriptor: unmarshal UpdateShipment method authorization: %w", err)
	}
	return &result, nil
}

// NewShipmentServiceAuthorization creates a new authorization middleware for ShipmentService.
func NewShipmentServiceAuthorization(
	next ShipmentServiceServer,
	permissionTester iamcel.PermissionTester,
	callerResolver iamcaller.Resolver,
) (*ShipmentServiceAuthorization, error) {
	descriptor, err := NewShipmentServiceIAMDescriptor()
	if err != nil {
		return nil, fmt.Errorf("new ShipmentService authorization: %w", err)
	}
	_ = descriptor
	var result ShipmentServiceAuthorization
	result.next = next
	descriptorCreateShipment, err := protoregistry.GlobalFiles.FindDescriptorByName("einride.saga.extend.book.v1beta1.ShipmentService.CreateShipment")
	if err != nil {
		return nil, fmt.Errorf("new ShipmentService authorization: failed to find descriptor for CreateShipment")
	}
	methodCreateShipment, ok := descriptorCreateShipment.(protoreflect.MethodDescriptor)
	if !ok {
		return nil, fmt.Errorf("new ShipmentService authorization: got non-method descriptor for CreateShipment")
	}
	beforeCreateShipment, err := iamauthz.NewBeforeMethodAuthorization(
		methodCreateShipment,
		descriptor.CreateShipmentAuthorization,
		permissionTester,
		callerResolver,
	)
	if err != nil {
		return nil, fmt.Errorf("new ShipmentService authorization: %w", err)
	}
	result.beforeCreateShipment = beforeCreateShipment
	descriptorGetShipment, err := protoregistry.GlobalFiles.FindDescriptorByName("einride.saga.extend.book.v1beta1.ShipmentService.GetShipment")
	if err != nil {
		return nil, fmt.Errorf("new ShipmentService authorization: failed to find descriptor for GetShipment")
	}
	methodGetShipment, ok := descriptorGetShipment.(protoreflect.MethodDescriptor)
	if !ok {
		return nil, fmt.Errorf("new ShipmentService authorization: got non-method descriptor for GetShipment")
	}
	beforeGetShipment, err := iamauthz.NewBeforeMethodAuthorization(
		methodGetShipment,
		descriptor.GetShipmentAuthorization,
		permissionTester,
		callerResolver,
	)
	if err != nil {
		return nil, fmt.Errorf("new ShipmentService authorization: %w", err)
	}
	result.beforeGetShipment = beforeGetShipment
	descriptorReleaseShipment, err := protoregistry.GlobalFiles.FindDescriptorByName("einride.saga.extend.book.v1beta1.ShipmentService.ReleaseShipment")
	if err != nil {
		return nil, fmt.Errorf("new ShipmentService authorization: failed to find descriptor for ReleaseShipment")
	}
	methodReleaseShipment, ok := descriptorReleaseShipment.(protoreflect.MethodDescriptor)
	if !ok {
		return nil, fmt.Errorf("new ShipmentService authorization: got non-method descriptor for ReleaseShipment")
	}
	beforeReleaseShipment, err := iamauthz.NewBeforeMethodAuthorization(
		methodReleaseShipment,
		descriptor.ReleaseShipmentAuthorization,
		permissionTester,
		callerResolver,
	)
	if err != nil {
		return nil, fmt.Errorf("new ShipmentService authorization: %w", err)
	}
	result.beforeReleaseShipment = beforeReleaseShipment
	descriptorCancelShipment, err := protoregistry.GlobalFiles.FindDescriptorByName("einride.saga.extend.book.v1beta1.ShipmentService.CancelShipment")
	if err != nil {
		return nil, fmt.Errorf("new ShipmentService authorization: failed to find descriptor for CancelShipment")
	}
	methodCancelShipment, ok := descriptorCancelShipment.(protoreflect.MethodDescriptor)
	if !ok {
		return nil, fmt.Errorf("new ShipmentService authorization: got non-method descriptor for CancelShipment")
	}
	beforeCancelShipment, err := iamauthz.NewBeforeMethodAuthorization(
		methodCancelShipment,
		descriptor.CancelShipmentAuthorization,
		permissionTester,
		callerResolver,
	)
	if err != nil {
		return nil, fmt.Errorf("new ShipmentService authorization: %w", err)
	}
	result.beforeCancelShipment = beforeCancelShipment
	descriptorUpdateShipment, err := protoregistry.GlobalFiles.FindDescriptorByName("einride.saga.extend.book.v1beta1.ShipmentService.UpdateShipment")
	if err != nil {
		return nil, fmt.Errorf("new ShipmentService authorization: failed to find descriptor for UpdateShipment")
	}
	methodUpdateShipment, ok := descriptorUpdateShipment.(protoreflect.MethodDescriptor)
	if !ok {
		return nil, fmt.Errorf("new ShipmentService authorization: got non-method descriptor for UpdateShipment")
	}
	beforeUpdateShipment, err := iamauthz.NewBeforeMethodAuthorization(
		methodUpdateShipment,
		descriptor.UpdateShipmentAuthorization,
		permissionTester,
		callerResolver,
	)
	if err != nil {
		return nil, fmt.Errorf("new ShipmentService authorization: %w", err)
	}
	result.beforeUpdateShipment = beforeUpdateShipment
	return &result, nil
}

type ShipmentServiceAuthorization struct {
	next                  ShipmentServiceServer
	beforeCreateShipment  *iamauthz.BeforeMethodAuthorization
	beforeGetShipment     *iamauthz.BeforeMethodAuthorization
	beforeReleaseShipment *iamauthz.BeforeMethodAuthorization
	beforeCancelShipment  *iamauthz.BeforeMethodAuthorization
	beforeUpdateShipment  *iamauthz.BeforeMethodAuthorization
}

func (a *ShipmentServiceAuthorization) CreateShipment(
	ctx context.Context,
	request *CreateShipmentRequest,
) (*Shipment, error) {
	ctx, err := a.beforeCreateShipment.AuthorizeRequest(ctx, request)
	if err != nil {
		return nil, err
	}
	return a.next.CreateShipment(ctx, request)
}

func (a *ShipmentServiceAuthorization) GetShipment(
	ctx context.Context,
	request *GetShipmentRequest,
) (*Shipment, error) {
	ctx, err := a.beforeGetShipment.AuthorizeRequest(ctx, request)
	if err != nil {
		return nil, err
	}
	return a.next.GetShipment(ctx, request)
}

func (a *ShipmentServiceAuthorization) ReleaseShipment(
	ctx context.Context,
	request *ReleaseShipmentRequest,
) (*Shipment, error) {
	ctx, err := a.beforeReleaseShipment.AuthorizeRequest(ctx, request)
	if err != nil {
		return nil, err
	}
	return a.next.ReleaseShipment(ctx, request)
}

func (a *ShipmentServiceAuthorization) CancelShipment(
	ctx context.Context,
	request *CancelShipmentRequest,
) (*Shipment, error) {
	ctx, err := a.beforeCancelShipment.AuthorizeRequest(ctx, request)
	if err != nil {
		return nil, err
	}
	return a.next.CancelShipment(ctx, request)
}

func (a *ShipmentServiceAuthorization) UpdateShipment(
	ctx context.Context,
	request *UpdateShipmentRequest,
) (*Shipment, error) {
	ctx, err := a.beforeUpdateShipment.AuthorizeRequest(ctx, request)
	if err != nil {
		return nil, err
	}
	return a.next.UpdateShipment(ctx, request)
}
