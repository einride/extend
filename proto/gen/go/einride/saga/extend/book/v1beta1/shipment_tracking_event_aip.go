// Code generated by protoc-gen-go-aip. DO NOT EDIT.
//
// versions:
// 	protoc-gen-go-aip development
// 	protoc (unknown)
// source: einride/saga/extend/book/v1beta1/shipment_tracking_event.proto

package bookv1beta1

import (
	fmt "fmt"
	resourcename "go.einride.tech/aip/resourcename"
	strings "strings"
)

type ShipmentTrackingEventResourceName struct {
	Space         string
	Shipment      string
	TrackingEvent string
}

func (n SpaceResourceName) ShipmentTrackingEventResourceName(
	shipment string,
	trackingEvent string,
) ShipmentTrackingEventResourceName {
	return ShipmentTrackingEventResourceName{
		Space:         n.Space,
		Shipment:      shipment,
		TrackingEvent: trackingEvent,
	}
}

func (n ShipmentResourceName) ShipmentTrackingEventResourceName(
	trackingEvent string,
) ShipmentTrackingEventResourceName {
	return ShipmentTrackingEventResourceName{
		Space:         n.Space,
		Shipment:      n.Shipment,
		TrackingEvent: trackingEvent,
	}
}

func (n ShipmentTrackingEventResourceName) Validate() error {
	if n.Space == "" {
		return fmt.Errorf("space: empty")
	}
	if strings.IndexByte(n.Space, '/') != -1 {
		return fmt.Errorf("space: contains illegal character '/'")
	}
	if n.Shipment == "" {
		return fmt.Errorf("shipment: empty")
	}
	if strings.IndexByte(n.Shipment, '/') != -1 {
		return fmt.Errorf("shipment: contains illegal character '/'")
	}
	if n.TrackingEvent == "" {
		return fmt.Errorf("tracking_event: empty")
	}
	if strings.IndexByte(n.TrackingEvent, '/') != -1 {
		return fmt.Errorf("tracking_event: contains illegal character '/'")
	}
	return nil
}

func (n ShipmentTrackingEventResourceName) ContainsWildcard() bool {
	return false || n.Space == "-" || n.Shipment == "-" || n.TrackingEvent == "-"
}

func (n ShipmentTrackingEventResourceName) String() string {
	return resourcename.Sprint(
		"spaces/{space}/shipments/{shipment}/trackingEvents/{tracking_event}",
		n.Space,
		n.Shipment,
		n.TrackingEvent,
	)
}

func (n ShipmentTrackingEventResourceName) MarshalString() (string, error) {
	if err := n.Validate(); err != nil {
		return "", err
	}
	return n.String(), nil
}

func (n *ShipmentTrackingEventResourceName) UnmarshalString(name string) error {
	return resourcename.Sscan(
		name,
		"spaces/{space}/shipments/{shipment}/trackingEvents/{tracking_event}",
		&n.Space,
		&n.Shipment,
		&n.TrackingEvent,
	)
}

func (n ShipmentTrackingEventResourceName) SpaceResourceName() SpaceResourceName {
	return SpaceResourceName{
		Space: n.Space,
	}
}

func (n ShipmentTrackingEventResourceName) ShipmentResourceName() ShipmentResourceName {
	return ShipmentResourceName{
		Space:    n.Space,
		Shipment: n.Shipment,
	}
}
