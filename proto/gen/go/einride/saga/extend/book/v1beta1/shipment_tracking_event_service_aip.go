// Code generated by protoc-gen-go-aip. DO NOT EDIT.
//
// versions:
// 	protoc-gen-go-aip development
// 	protoc (unknown)
// source: einride/saga/extend/book/v1beta1/shipment_tracking_event_service.proto

package bookv1beta1

import (
	fmt "fmt"
	resourcename "go.einride.tech/aip/resourcename"
	strings "strings"
)

type SpaceResourceName struct {
	Space string
}

func (n SpaceResourceName) Validate() error {
	if n.Space == "" {
		return fmt.Errorf("space: empty")
	}
	if strings.IndexByte(n.Space, '/') != -1 {
		return fmt.Errorf("space: contains illegal character '/'")
	}
	return nil
}

func (n SpaceResourceName) ContainsWildcard() bool {
	return false || n.Space == "-"
}

func (n SpaceResourceName) String() string {
	return resourcename.Sprint(
		"spaces/{space}",
		n.Space,
	)
}

func (n SpaceResourceName) MarshalString() (string, error) {
	if err := n.Validate(); err != nil {
		return "", err
	}
	return n.String(), nil
}

func (n *SpaceResourceName) UnmarshalString(name string) error {
	return resourcename.Sscan(
		name,
		"spaces/{space}",
		&n.Space,
	)
}

type OrganizationResourceName struct {
	Organization string
}

func (n OrganizationResourceName) Validate() error {
	if n.Organization == "" {
		return fmt.Errorf("organization: empty")
	}
	if strings.IndexByte(n.Organization, '/') != -1 {
		return fmt.Errorf("organization: contains illegal character '/'")
	}
	return nil
}

func (n OrganizationResourceName) ContainsWildcard() bool {
	return false || n.Organization == "-"
}

func (n OrganizationResourceName) String() string {
	return resourcename.Sprint(
		"organizations/{organization}",
		n.Organization,
	)
}

func (n OrganizationResourceName) MarshalString() (string, error) {
	if err := n.Validate(); err != nil {
		return "", err
	}
	return n.String(), nil
}

func (n *OrganizationResourceName) UnmarshalString(name string) error {
	return resourcename.Sscan(
		name,
		"organizations/{organization}",
		&n.Organization,
	)
}

type UserResourceName struct {
	User string
}

func (n UserResourceName) Validate() error {
	if n.User == "" {
		return fmt.Errorf("user: empty")
	}
	if strings.IndexByte(n.User, '/') != -1 {
		return fmt.Errorf("user: contains illegal character '/'")
	}
	return nil
}

func (n UserResourceName) ContainsWildcard() bool {
	return false || n.User == "-"
}

func (n UserResourceName) String() string {
	return resourcename.Sprint(
		"organizations/{user}",
		n.User,
	)
}

func (n UserResourceName) MarshalString() (string, error) {
	if err := n.Validate(); err != nil {
		return "", err
	}
	return n.String(), nil
}

func (n *UserResourceName) UnmarshalString(name string) error {
	return resourcename.Sscan(
		name,
		"organizations/{user}",
		&n.User,
	)
}

type SenderResourceName struct {
	Space  string
	Sender string
}

func (n SpaceResourceName) SenderResourceName(
	sender string,
) SenderResourceName {
	return SenderResourceName{
		Space:  n.Space,
		Sender: sender,
	}
}

func (n SpaceResourceName) SenderResourceName(
	sender string,
) SenderResourceName {
	return SenderResourceName{
		Space:  n.Space,
		Sender: sender,
	}
}

func (n SenderResourceName) Validate() error {
	if n.Space == "" {
		return fmt.Errorf("space: empty")
	}
	if strings.IndexByte(n.Space, '/') != -1 {
		return fmt.Errorf("space: contains illegal character '/'")
	}
	if n.Sender == "" {
		return fmt.Errorf("sender: empty")
	}
	if strings.IndexByte(n.Sender, '/') != -1 {
		return fmt.Errorf("sender: contains illegal character '/'")
	}
	return nil
}

func (n SenderResourceName) ContainsWildcard() bool {
	return false || n.Space == "-" || n.Sender == "-"
}

func (n SenderResourceName) String() string {
	return resourcename.Sprint(
		"spaces/{space}/senders/{sender}",
		n.Space,
		n.Sender,
	)
}

func (n SenderResourceName) MarshalString() (string, error) {
	if err := n.Validate(); err != nil {
		return "", err
	}
	return n.String(), nil
}

func (n *SenderResourceName) UnmarshalString(name string) error {
	return resourcename.Sscan(
		name,
		"spaces/{space}/senders/{sender}",
		&n.Space,
		&n.Sender,
	)
}

func (n SenderResourceName) SpaceResourceName() SpaceResourceName {
	return SpaceResourceName{
		Space: n.Space,
	}
}

func (n SenderResourceName) SpaceResourceName() SpaceResourceName {
	return SpaceResourceName{
		Space: n.Space,
	}
}

type BookingResourceName struct {
	Space   string
	Booking string
}

func (n SpaceResourceName) BookingResourceName(
	booking string,
) BookingResourceName {
	return BookingResourceName{
		Space:   n.Space,
		Booking: booking,
	}
}

func (n SpaceResourceName) BookingResourceName(
	booking string,
) BookingResourceName {
	return BookingResourceName{
		Space:   n.Space,
		Booking: booking,
	}
}

func (n BookingResourceName) Validate() error {
	if n.Space == "" {
		return fmt.Errorf("space: empty")
	}
	if strings.IndexByte(n.Space, '/') != -1 {
		return fmt.Errorf("space: contains illegal character '/'")
	}
	if n.Booking == "" {
		return fmt.Errorf("booking: empty")
	}
	if strings.IndexByte(n.Booking, '/') != -1 {
		return fmt.Errorf("booking: contains illegal character '/'")
	}
	return nil
}

func (n BookingResourceName) ContainsWildcard() bool {
	return false || n.Space == "-" || n.Booking == "-"
}

func (n BookingResourceName) String() string {
	return resourcename.Sprint(
		"spaces/{space}/bookings/{booking}",
		n.Space,
		n.Booking,
	)
}

func (n BookingResourceName) MarshalString() (string, error) {
	if err := n.Validate(); err != nil {
		return "", err
	}
	return n.String(), nil
}

func (n *BookingResourceName) UnmarshalString(name string) error {
	return resourcename.Sscan(
		name,
		"spaces/{space}/bookings/{booking}",
		&n.Space,
		&n.Booking,
	)
}

func (n BookingResourceName) SpaceResourceName() SpaceResourceName {
	return SpaceResourceName{
		Space: n.Space,
	}
}

func (n BookingResourceName) SpaceResourceName() SpaceResourceName {
	return SpaceResourceName{
		Space: n.Space,
	}
}
