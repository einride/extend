// Code generated by protoc-gen-go-aip. DO NOT EDIT.
//
// versions:
// 	protoc-gen-go-aip development
// 	protoc (unknown)
// source: einride/saga/extend/book/v1beta1/booking.proto

package bookv1beta1

import (
	fmt "fmt"
	resourcename "go.einride.tech/aip/resourcename"
	strings "strings"
)

type BookingResourceName struct {
	Space   string
	Booking string
}

func (n SpaceResourceName) BookingResourceName(
	booking string,
) BookingResourceName {
	return BookingResourceName{
		Space:   n.Space,
		Booking: booking,
	}
}

func (n BookingResourceName) Validate() error {
	if n.Space == "" {
		return fmt.Errorf("space: empty")
	}
	if strings.IndexByte(n.Space, '/') != -1 {
		return fmt.Errorf("space: contains illegal character '/'")
	}
	if n.Booking == "" {
		return fmt.Errorf("booking: empty")
	}
	if strings.IndexByte(n.Booking, '/') != -1 {
		return fmt.Errorf("booking: contains illegal character '/'")
	}
	return nil
}

func (n BookingResourceName) ContainsWildcard() bool {
	return false || n.Space == "-" || n.Booking == "-"
}

func (n BookingResourceName) String() string {
	return resourcename.Sprint(
		"spaces/{space}/bookings/{booking}",
		n.Space,
		n.Booking,
	)
}

func (n BookingResourceName) MarshalString() (string, error) {
	if err := n.Validate(); err != nil {
		return "", err
	}
	return n.String(), nil
}

func (n *BookingResourceName) UnmarshalString(name string) error {
	return resourcename.Sscan(
		name,
		"spaces/{space}/bookings/{booking}",
		&n.Space,
		&n.Booking,
	)
}

func (n BookingResourceName) SpaceResourceName() SpaceResourceName {
	return SpaceResourceName{
		Space: n.Space,
	}
}
