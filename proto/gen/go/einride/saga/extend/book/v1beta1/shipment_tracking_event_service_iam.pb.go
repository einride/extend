// Code generated by protoc-gen-go-iam. DO NOT EDIT.
// versions:
// 	protoc            (unknown)

package bookv1beta1

import (
	context "context"
	fmt "fmt"
	iamauthz "go.einride.tech/iam/iamauthz"
	iamcaller "go.einride.tech/iam/iamcaller"
	iamcel "go.einride.tech/iam/iamcel"
	v1 "go.einride.tech/iam/proto/gen/einride/iam/v1"
	proto "google.golang.org/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoregistry "google.golang.org/protobuf/reflect/protoregistry"
)

type ShipmentTrackingEventServiceIAMDescriptor struct {
	CreateShipmentTrackingEventAuthorization *v1.MethodAuthorizationOptions
	GetShipmentTrackingEventAuthorization    *v1.MethodAuthorizationOptions
	ListShipmentTrackingEventsAuthorization  *v1.MethodAuthorizationOptions
}

// NewShipmentTrackingEventServiceIAMDescriptor returns a new ShipmentTrackingEventService IAM descriptor.
func NewShipmentTrackingEventServiceIAMDescriptor() (*ShipmentTrackingEventServiceIAMDescriptor, error) {
	result := ShipmentTrackingEventServiceIAMDescriptor{
		CreateShipmentTrackingEventAuthorization: &v1.MethodAuthorizationOptions{},
		GetShipmentTrackingEventAuthorization:    &v1.MethodAuthorizationOptions{},
		ListShipmentTrackingEventsAuthorization:  &v1.MethodAuthorizationOptions{},
	}
	if err := proto.Unmarshal(
		[]byte{0xa, 0x21, 0x62, 0x6f, 0x6f, 0x6b, 0x2e, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x1a, 0x65, 0xa, 0x1c, 0x74, 0x65, 0x73, 0x74, 0x28, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x29, 0x1a, 0x45, 0x54, 0x68, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x74},
		result.CreateShipmentTrackingEventAuthorization,
	); err != nil {
		return nil, fmt.Errorf("new ShipmentTrackingEventService IAM descriptor: unmarshal CreateShipmentTrackingEvent method authorization: %w", err)
	}
	if err := proto.Unmarshal(
		[]byte{0xa, 0x1e, 0x62, 0x6f, 0x6f, 0x6b, 0x2e, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x67, 0x65, 0x74, 0x1a, 0x60, 0xa, 0x1a, 0x74, 0x65, 0x73, 0x74, 0x28, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x29, 0x1a, 0x42, 0x54, 0x68, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x67, 0x65, 0x74, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x74},
		result.GetShipmentTrackingEventAuthorization,
	); err != nil {
		return nil, fmt.Errorf("new ShipmentTrackingEventService IAM descriptor: unmarshal GetShipmentTrackingEvent method authorization: %w", err)
	}
	if err := proto.Unmarshal(
		[]byte{0xa, 0x1f, 0x62, 0x6f, 0x6f, 0x6b, 0x2e, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x1a, 0x7d, 0xa, 0x1c, 0x74, 0x65, 0x73, 0x74, 0x28, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x29, 0x1a, 0x5d, 0x54, 0x68, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x6c, 0x69, 0x73, 0x74, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x20, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2e},
		result.ListShipmentTrackingEventsAuthorization,
	); err != nil {
		return nil, fmt.Errorf("new ShipmentTrackingEventService IAM descriptor: unmarshal ListShipmentTrackingEvents method authorization: %w", err)
	}
	return &result, nil
}

// NewShipmentTrackingEventServiceAuthorization creates a new authorization middleware for ShipmentTrackingEventService.
func NewShipmentTrackingEventServiceAuthorization(
	next ShipmentTrackingEventServiceServer,
	permissionTester iamcel.PermissionTester,
	callerResolver iamcaller.Resolver,
) (*ShipmentTrackingEventServiceAuthorization, error) {
	descriptor, err := NewShipmentTrackingEventServiceIAMDescriptor()
	if err != nil {
		return nil, fmt.Errorf("new ShipmentTrackingEventService authorization: %w", err)
	}
	_ = descriptor
	var result ShipmentTrackingEventServiceAuthorization
	result.next = next
	descriptorCreateShipmentTrackingEvent, err := protoregistry.GlobalFiles.FindDescriptorByName("einride.saga.extend.book.v1beta1.ShipmentTrackingEventService.CreateShipmentTrackingEvent")
	if err != nil {
		return nil, fmt.Errorf("new ShipmentTrackingEventService authorization: failed to find descriptor for CreateShipmentTrackingEvent")
	}
	methodCreateShipmentTrackingEvent, ok := descriptorCreateShipmentTrackingEvent.(protoreflect.MethodDescriptor)
	if !ok {
		return nil, fmt.Errorf("new ShipmentTrackingEventService authorization: got non-method descriptor for CreateShipmentTrackingEvent")
	}
	beforeCreateShipmentTrackingEvent, err := iamauthz.NewBeforeMethodAuthorization(
		methodCreateShipmentTrackingEvent,
		descriptor.CreateShipmentTrackingEventAuthorization,
		permissionTester,
		callerResolver,
	)
	if err != nil {
		return nil, fmt.Errorf("new ShipmentTrackingEventService authorization: %w", err)
	}
	result.beforeCreateShipmentTrackingEvent = beforeCreateShipmentTrackingEvent
	descriptorGetShipmentTrackingEvent, err := protoregistry.GlobalFiles.FindDescriptorByName("einride.saga.extend.book.v1beta1.ShipmentTrackingEventService.GetShipmentTrackingEvent")
	if err != nil {
		return nil, fmt.Errorf("new ShipmentTrackingEventService authorization: failed to find descriptor for GetShipmentTrackingEvent")
	}
	methodGetShipmentTrackingEvent, ok := descriptorGetShipmentTrackingEvent.(protoreflect.MethodDescriptor)
	if !ok {
		return nil, fmt.Errorf("new ShipmentTrackingEventService authorization: got non-method descriptor for GetShipmentTrackingEvent")
	}
	beforeGetShipmentTrackingEvent, err := iamauthz.NewBeforeMethodAuthorization(
		methodGetShipmentTrackingEvent,
		descriptor.GetShipmentTrackingEventAuthorization,
		permissionTester,
		callerResolver,
	)
	if err != nil {
		return nil, fmt.Errorf("new ShipmentTrackingEventService authorization: %w", err)
	}
	result.beforeGetShipmentTrackingEvent = beforeGetShipmentTrackingEvent
	descriptorListShipmentTrackingEvents, err := protoregistry.GlobalFiles.FindDescriptorByName("einride.saga.extend.book.v1beta1.ShipmentTrackingEventService.ListShipmentTrackingEvents")
	if err != nil {
		return nil, fmt.Errorf("new ShipmentTrackingEventService authorization: failed to find descriptor for ListShipmentTrackingEvents")
	}
	methodListShipmentTrackingEvents, ok := descriptorListShipmentTrackingEvents.(protoreflect.MethodDescriptor)
	if !ok {
		return nil, fmt.Errorf("new ShipmentTrackingEventService authorization: got non-method descriptor for ListShipmentTrackingEvents")
	}
	beforeListShipmentTrackingEvents, err := iamauthz.NewBeforeMethodAuthorization(
		methodListShipmentTrackingEvents,
		descriptor.ListShipmentTrackingEventsAuthorization,
		permissionTester,
		callerResolver,
	)
	if err != nil {
		return nil, fmt.Errorf("new ShipmentTrackingEventService authorization: %w", err)
	}
	result.beforeListShipmentTrackingEvents = beforeListShipmentTrackingEvents
	return &result, nil
}

type ShipmentTrackingEventServiceAuthorization struct {
	next                              ShipmentTrackingEventServiceServer
	beforeCreateShipmentTrackingEvent *iamauthz.BeforeMethodAuthorization
	beforeGetShipmentTrackingEvent    *iamauthz.BeforeMethodAuthorization
	beforeListShipmentTrackingEvents  *iamauthz.BeforeMethodAuthorization
}

func (a *ShipmentTrackingEventServiceAuthorization) CreateShipmentTrackingEvent(
	ctx context.Context,
	request *CreateShipmentTrackingEventRequest,
) (*ShipmentTrackingEvent, error) {
	ctx, err := a.beforeCreateShipmentTrackingEvent.AuthorizeRequest(ctx, request)
	if err != nil {
		return nil, err
	}
	return a.next.CreateShipmentTrackingEvent(ctx, request)
}

func (a *ShipmentTrackingEventServiceAuthorization) GetShipmentTrackingEvent(
	ctx context.Context,
	request *GetShipmentTrackingEventRequest,
) (*ShipmentTrackingEvent, error) {
	ctx, err := a.beforeGetShipmentTrackingEvent.AuthorizeRequest(ctx, request)
	if err != nil {
		return nil, err
	}
	return a.next.GetShipmentTrackingEvent(ctx, request)
}

func (a *ShipmentTrackingEventServiceAuthorization) ListShipmentTrackingEvents(
	ctx context.Context,
	request *ListShipmentTrackingEventsRequest,
) (*ListShipmentTrackingEventsResponse, error) {
	ctx, err := a.beforeListShipmentTrackingEvents.AuthorizeRequest(ctx, request)
	if err != nil {
		return nil, err
	}
	return a.next.ListShipmentTrackingEvents(ctx, request)
}
