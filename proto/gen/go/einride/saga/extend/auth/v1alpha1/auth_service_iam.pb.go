// Code generated by protoc-gen-go-iam. DO NOT EDIT.
// versions:
// 	protoc            (unknown)

package authv1alpha1

import (
	context "context"
	fmt "fmt"
	iamauthz "go.einride.tech/iam/iamauthz"
	iamcaller "go.einride.tech/iam/iamcaller"
	iamcel "go.einride.tech/iam/iamcel"
	v1 "go.einride.tech/iam/proto/gen/einride/iam/v1"
	proto "google.golang.org/protobuf/proto"
)

type AuthenticationServiceIAMDescriptor struct {
	ExchangeSecretAuthorization *v1.MethodAuthorizationOptions
}

// NewAuthenticationServiceIAMDescriptor returns a new AuthenticationService IAM descriptor.
func NewAuthenticationServiceIAMDescriptor() (*AuthenticationServiceIAMDescriptor, error) {
	result := AuthenticationServiceIAMDescriptor{
		ExchangeSecretAuthorization: &v1.MethodAuthorizationOptions{},
	}
	if err := proto.Unmarshal(
		[]byte{0x30, 0x1},
		result.ExchangeSecretAuthorization,
	); err != nil {
		return nil, fmt.Errorf("new AuthenticationService IAM descriptor: unmarshal ExchangeSecret method authorization: %w", err)
	}
	return &result, nil
}

// NewAuthenticationServiceAuthorization creates a new authorization middleware for AuthenticationService.
func NewAuthenticationServiceAuthorization(
	next AuthenticationServiceServer,
	permissionTester iamcel.PermissionTester,
	callerResolver iamcaller.Resolver,
) (*AuthenticationServiceAuthorization, error) {
	descriptor, err := NewAuthenticationServiceIAMDescriptor()
	if err != nil {
		return nil, fmt.Errorf("new AuthenticationService authorization: %w", err)
	}
	_ = descriptor
	var result AuthenticationServiceAuthorization
	result.next = next
	return &result, nil
}

type AuthenticationServiceAuthorization struct {
	next AuthenticationServiceServer
}

func (a *AuthenticationServiceAuthorization) ExchangeSecret(
	ctx context.Context,
	request *ExchangeSecretRequest,
) (*ExchangeSecretResponse, error) {
	iamauthz.Authorize(ctx)
	return a.next.ExchangeSecret(ctx, request)
}
