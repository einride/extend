// Code generated by protoc-gen-go-cli. DO NOT EDIT.
// versions:
// 	protoc        (unknown)
package bookv1alpha1

import (
	cobra "github.com/spf13/cobra"
	cli "go.einride.tech/protoc-gen-go-cli/cli"
	protoflag "go.einride.tech/protoc-gen-go-cli/protoflag"
	protojson "google.golang.org/protobuf/encoding/protojson"
	os "os"
)

func NewBookingServiceCommand(use string) *cobra.Command {
	cmd := &cobra.Command{
		Use:   use,
		Short: "freight booking service",
		Annotations: map[string]string{
			"type": "service",
		},
		PersistentPreRun: func(cmd *cobra.Command, _ []string) {
			cli.SetDefaultHost(cmd.Context(), "api.saga.einride.tech")
		},
	}
	cmd.AddCommand(newBookingServiceCreateBookingCommand())
	cmd.AddCommand(newBookingServiceGetBookingCommand())
	cmd.AddCommand(newBookingServiceListBookingsCommand())
	cmd.AddCommand(newBookingServiceBatchGetBookingsCommand())
	cmd.AddCommand(newBookingServiceBatchCreateBookingsCommand())
	return cmd
}

func newBookingServiceCreateBookingCommand() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "create-booking",
		Short: "create a booking",
	}
	var fromFile string
	cmd.Flags().StringVarP(&fromFile, "from-file", "f", "", "path to a JSON file containing request payload")
	_ = cmd.MarkFlagFilename("from-file", "json")
	var flag_Parent protoflag.String
	cmd.Flags().Var(
		&flag_Parent,
		"parent",
		"resource name of the space to create the booking in",
	)
	_ = cmd.RegisterFlagCompletionFunc(
		"parent",
		cli.ResourceNameCompletionFunc(
			"spaces/{space}",
		),
	)
	var flag_Booking_Name protoflag.String
	cmd.Flags().Var(
		&flag_Booking_Name,
		"booking.name",
		"the resource name of the booking",
	)
	_ = cmd.RegisterFlagCompletionFunc(
		"booking.name",
		cli.ResourceNameCompletionFunc(
			"organizations/{organization}/bookings/{booking}",
		),
	)
	var flag_Booking_ReferenceId protoflag.String
	cmd.Flags().Var(
		&flag_Booking_ReferenceId,
		"booking.reference-id",
		"the reference id for this booking from an external system, e",
	)
	cmd.RunE = func(cmd *cobra.Command, args []string) error {
		var request CreateBookingRequest
		if cmd.Flags().Changed("from-file") {
			data, err := os.ReadFile(fromFile)
			if err != nil {
				return err
			}
			if err := protojson.Unmarshal(data, &request); err != nil {
				return err
			}
		}
		if cmd.Flags().Changed("parent") {
			r := request.ProtoReflect()
			r.Set(r.Descriptor().Fields().ByName("parent"), flag_Parent.ProtoReflectValue())
		}
		if cmd.Flags().Changed("booking.name") {
			r := request.ProtoReflect()
			r = r.Mutable(r.Descriptor().Fields().ByName("booking")).Message()
			r.Set(r.Descriptor().Fields().ByName("name"), flag_Booking_Name.ProtoReflectValue())
		}
		if cmd.Flags().Changed("booking.reference-id") {
			r := request.ProtoReflect()
			r = r.Mutable(r.Descriptor().Fields().ByName("booking")).Message()
			r.Set(r.Descriptor().Fields().ByName("reference_id"), flag_Booking_ReferenceId.ProtoReflectValue())
		}
		conn, err := cli.Dial(cmd.Context())
		if err != nil {
			return err
		}
		client := NewBookingServiceClient(conn)
		cli.LogRequest(cmd.Context(), &request)
		response, err := client.CreateBooking(cmd.Context(), &request)
		if err != nil {
			cli.LogError(cmd.Context(), err)
			os.Exit(1)
		}
		cli.LogResponse(cmd.Context(), response)
		return nil
	}
	return cmd
}

func newBookingServiceGetBookingCommand() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "get-booking",
		Short: "get a booking",
	}
	var fromFile string
	cmd.Flags().StringVarP(&fromFile, "from-file", "f", "", "path to a JSON file containing request payload")
	_ = cmd.MarkFlagFilename("from-file", "json")
	var flag_Name protoflag.String
	cmd.Flags().Var(
		&flag_Name,
		"name",
		"the resource name of the booking to retrieve",
	)
	_ = cmd.RegisterFlagCompletionFunc(
		"name",
		cli.ResourceNameCompletionFunc(
			"organizations/{organization}/bookings/{booking}",
		),
	)
	cmd.RunE = func(cmd *cobra.Command, args []string) error {
		var request GetBookingRequest
		if cmd.Flags().Changed("from-file") {
			data, err := os.ReadFile(fromFile)
			if err != nil {
				return err
			}
			if err := protojson.Unmarshal(data, &request); err != nil {
				return err
			}
		}
		if cmd.Flags().Changed("name") {
			r := request.ProtoReflect()
			r.Set(r.Descriptor().Fields().ByName("name"), flag_Name.ProtoReflectValue())
		}
		conn, err := cli.Dial(cmd.Context())
		if err != nil {
			return err
		}
		client := NewBookingServiceClient(conn)
		cli.LogRequest(cmd.Context(), &request)
		response, err := client.GetBooking(cmd.Context(), &request)
		if err != nil {
			cli.LogError(cmd.Context(), err)
			os.Exit(1)
		}
		cli.LogResponse(cmd.Context(), response)
		return nil
	}
	return cmd
}

func newBookingServiceListBookingsCommand() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "list-bookings",
		Short: "list bookings",
	}
	var fromFile string
	cmd.Flags().StringVarP(&fromFile, "from-file", "f", "", "path to a JSON file containing request payload")
	_ = cmd.MarkFlagFilename("from-file", "json")
	var flag_Parent protoflag.String
	cmd.Flags().Var(
		&flag_Parent,
		"parent",
		"the parent space to list bookings in",
	)
	var flag_PageSize protoflag.Int32
	cmd.Flags().Var(
		&flag_PageSize,
		"page-size",
		"the maximum number of results to return",
	)
	var flag_PageToken protoflag.String
	cmd.Flags().Var(
		&flag_PageToken,
		"page-token",
		"a page token, received from a previous call",
	)
	cmd.RunE = func(cmd *cobra.Command, args []string) error {
		var request ListBookingsRequest
		if cmd.Flags().Changed("from-file") {
			data, err := os.ReadFile(fromFile)
			if err != nil {
				return err
			}
			if err := protojson.Unmarshal(data, &request); err != nil {
				return err
			}
		}
		if cmd.Flags().Changed("parent") {
			r := request.ProtoReflect()
			r.Set(r.Descriptor().Fields().ByName("parent"), flag_Parent.ProtoReflectValue())
		}
		if cmd.Flags().Changed("page-size") {
			r := request.ProtoReflect()
			r.Set(r.Descriptor().Fields().ByName("page_size"), flag_PageSize.ProtoReflectValue())
		}
		if cmd.Flags().Changed("page-token") {
			r := request.ProtoReflect()
			r.Set(r.Descriptor().Fields().ByName("page_token"), flag_PageToken.ProtoReflectValue())
		}
		conn, err := cli.Dial(cmd.Context())
		if err != nil {
			return err
		}
		client := NewBookingServiceClient(conn)
		cli.LogRequest(cmd.Context(), &request)
		response, err := client.ListBookings(cmd.Context(), &request)
		if err != nil {
			cli.LogError(cmd.Context(), err)
			os.Exit(1)
		}
		cli.LogResponse(cmd.Context(), response)
		return nil
	}
	return cmd
}

func newBookingServiceBatchGetBookingsCommand() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "batch-get-bookings",
		Short: "batch get bookings",
	}
	var fromFile string
	cmd.Flags().StringVarP(&fromFile, "from-file", "f", "", "path to a JSON file containing request payload")
	_ = cmd.MarkFlagFilename("from-file", "json")
	var flag_Parent protoflag.String
	cmd.Flags().Var(
		&flag_Parent,
		"parent",
		"the parent resource shared by all bookings being retrieved",
	)
	_ = cmd.RegisterFlagCompletionFunc(
		"parent",
		cli.ResourceNameCompletionFunc(
			"spaces/{space}",
		),
	)
	var flag_Names protoflag.StringList
	cmd.Flags().Var(
		&flag_Names,
		"names",
		"the names of the bookings to retrieve",
	)
	_ = cmd.RegisterFlagCompletionFunc(
		"names",
		cli.ResourceNameCompletionFunc(
			"organizations/{organization}/bookings/{booking}",
		),
	)
	cmd.RunE = func(cmd *cobra.Command, args []string) error {
		var request BatchGetBookingsRequest
		if cmd.Flags().Changed("from-file") {
			data, err := os.ReadFile(fromFile)
			if err != nil {
				return err
			}
			if err := protojson.Unmarshal(data, &request); err != nil {
				return err
			}
		}
		if cmd.Flags().Changed("parent") {
			r := request.ProtoReflect()
			r.Set(r.Descriptor().Fields().ByName("parent"), flag_Parent.ProtoReflectValue())
		}
		if cmd.Flags().Changed("names") {
			r := request.ProtoReflect()
			r.Set(r.Descriptor().Fields().ByName("names"), flag_Names.ProtoReflectValue())
		}
		conn, err := cli.Dial(cmd.Context())
		if err != nil {
			return err
		}
		client := NewBookingServiceClient(conn)
		cli.LogRequest(cmd.Context(), &request)
		response, err := client.BatchGetBookings(cmd.Context(), &request)
		if err != nil {
			cli.LogError(cmd.Context(), err)
			os.Exit(1)
		}
		cli.LogResponse(cmd.Context(), response)
		return nil
	}
	return cmd
}

func newBookingServiceBatchCreateBookingsCommand() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "batch-create-bookings",
		Short: "batch create bookings",
	}
	var fromFile string
	cmd.Flags().StringVarP(&fromFile, "from-file", "f", "", "path to a JSON file containing request payload")
	_ = cmd.MarkFlagFilename("from-file", "json")
	var flag_Parent protoflag.String
	cmd.Flags().Var(
		&flag_Parent,
		"parent",
		"the parent resource shared by all bookings being created",
	)
	_ = cmd.RegisterFlagCompletionFunc(
		"parent",
		cli.ResourceNameCompletionFunc(
			"spaces/{space}",
		),
	)
	cmd.RunE = func(cmd *cobra.Command, args []string) error {
		var request BatchCreateBookingsRequest
		if cmd.Flags().Changed("from-file") {
			data, err := os.ReadFile(fromFile)
			if err != nil {
				return err
			}
			if err := protojson.Unmarshal(data, &request); err != nil {
				return err
			}
		}
		if cmd.Flags().Changed("parent") {
			r := request.ProtoReflect()
			r.Set(r.Descriptor().Fields().ByName("parent"), flag_Parent.ProtoReflectValue())
		}
		conn, err := cli.Dial(cmd.Context())
		if err != nil {
			return err
		}
		client := NewBookingServiceClient(conn)
		cli.LogRequest(cmd.Context(), &request)
		response, err := client.BatchCreateBookings(cmd.Context(), &request)
		if err != nil {
			cli.LogError(cmd.Context(), err)
			os.Exit(1)
		}
		cli.LogResponse(cmd.Context(), response)
		return nil
	}
	return cmd
}
