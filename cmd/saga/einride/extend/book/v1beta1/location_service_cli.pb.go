// Code generated by protoc-gen-go-cli. DO NOT EDIT.
// versions:
// 	protoc        (unknown)
package bookv1beta1

import (
	cobra "github.com/spf13/cobra"
	cli "go.einride.tech/protoc-gen-go-cli/cli"
	protoflag "go.einride.tech/protoc-gen-go-cli/protoflag"
	protojson "google.golang.org/protobuf/encoding/protojson"
	os "os"
)

func NewLocationServiceCommand(use string) *cobra.Command {
	cmd := &cobra.Command{
		Use:   use,
		Short: "this api represents a location service",
		Annotations: map[string]string{
			"type": "service",
		},
		PersistentPreRun: func(cmd *cobra.Command, _ []string) {
			cli.SetDefaultHost(cmd.Context(), "book.saga.einride.systems")
		},
	}
	cmd.AddCommand(newLocationServiceListLocationsCommand())
	cmd.AddCommand(newLocationServiceCreateLocationCommand())
	return cmd
}

func newLocationServiceListLocationsCommand() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "list-locations",
		Short: "list locations in a space",
	}
	var fromFile string
	cmd.Flags().StringVarP(&fromFile, "from-file", "f", "", "path to a JSON file containing request payload")
	_ = cmd.MarkFlagFilename("from-file", "json")
	var flag_Parent protoflag.String
	cmd.Flags().Var(
		&flag_Parent,
		"parent",
		"the resource name of the parent, which owns this collection of locations",
	)
	var flag_PageSize protoflag.Int32
	cmd.Flags().Var(
		&flag_PageSize,
		"page-size",
		"requested page size",
	)
	var flag_PageToken protoflag.String
	cmd.Flags().Var(
		&flag_PageToken,
		"page-token",
		"a token identifying a page of results the server should return",
	)
	cmd.RunE = func(cmd *cobra.Command, args []string) error {
		var request ListLocationsRequest
		if cmd.Flags().Changed("from-file") {
			data, err := os.ReadFile(fromFile)
			if err != nil {
				return err
			}
			if err := protojson.Unmarshal(data, &request); err != nil {
				return err
			}
		}
		if cmd.Flags().Changed("parent") {
			r := request.ProtoReflect()
			r.Set(r.Descriptor().Fields().ByName("parent"), flag_Parent.ProtoReflectValue())
		}
		if cmd.Flags().Changed("page-size") {
			r := request.ProtoReflect()
			r.Set(r.Descriptor().Fields().ByName("page_size"), flag_PageSize.ProtoReflectValue())
		}
		if cmd.Flags().Changed("page-token") {
			r := request.ProtoReflect()
			r.Set(r.Descriptor().Fields().ByName("page_token"), flag_PageToken.ProtoReflectValue())
		}
		conn, err := cli.Dial(cmd.Context())
		if err != nil {
			return err
		}
		client := NewLocationServiceClient(conn)
		cli.LogRequest(cmd.Context(), &request)
		response, err := client.ListLocations(cmd.Context(), &request)
		if err != nil {
			cli.LogError(cmd.Context(), err)
			os.Exit(1)
		}
		cli.LogResponse(cmd.Context(), response)
		return nil
	}
	return cmd
}

func newLocationServiceCreateLocationCommand() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "create-location",
		Short: "create a location in a space",
	}
	var fromFile string
	cmd.Flags().StringVarP(&fromFile, "from-file", "f", "", "path to a JSON file containing request payload")
	_ = cmd.MarkFlagFilename("from-file", "json")
	var flag_Parent protoflag.String
	cmd.Flags().Var(
		&flag_Parent,
		"parent",
		"the resource name of the parent, which owns this collection of locations",
	)
	var flag_Location_DisplayName protoflag.String
	cmd.Flags().Var(
		&flag_Location_DisplayName,
		"location.display-name",
		"the display name of the location",
	)
	var flag_Location_Address_ReferenceId protoflag.String
	cmd.Flags().Var(
		&flag_Location_Address_ReferenceId,
		"location.address.reference-id",
		"address reference id",
	)
	var flag_Location_Address_Recipient protoflag.String
	cmd.Flags().Var(
		&flag_Location_Address_Recipient,
		"location.address.recipient",
		"address recipient",
	)
	var flag_Location_Address_Co protoflag.String
	cmd.Flags().Var(
		&flag_Location_Address_Co,
		"location.address.co",
		"address care of (c/o)",
	)
	var flag_Location_Address_AddressLine1 protoflag.String
	cmd.Flags().Var(
		&flag_Location_Address_AddressLine1,
		"location.address.address-line1",
		"address line 1",
	)
	var flag_Location_Address_AddressLine2 protoflag.String
	cmd.Flags().Var(
		&flag_Location_Address_AddressLine2,
		"location.address.address-line2",
		"address line 2",
	)
	var flag_Location_Address_PostalCode protoflag.String
	cmd.Flags().Var(
		&flag_Location_Address_PostalCode,
		"location.address.postal-code",
		"address postal code",
	)
	var flag_Location_Address_City protoflag.String
	cmd.Flags().Var(
		&flag_Location_Address_City,
		"location.address.city",
		"address city",
	)
	var flag_Location_Address_RegionCode protoflag.String
	cmd.Flags().Var(
		&flag_Location_Address_RegionCode,
		"location.address.region-code",
		"address region code",
	)
	var flag_Location_Comment protoflag.String
	cmd.Flags().Var(
		&flag_Location_Comment,
		"location.comment",
		"a comment about this location",
	)
	var flag_Location_Contacts protoflag.String
	cmd.Flags().Var(
		&flag_Location_Contacts,
		"location.contacts",
		"contacts regarding this location",
	)
	var flag_Location_ExternalReferenceId protoflag.String
	cmd.Flags().Var(
		&flag_Location_ExternalReferenceId,
		"location.external-reference-id",
		"an external reference for this location",
	)
	var flag_Location_LatLng_Latitude protoflag.Double
	cmd.Flags().Var(
		&flag_Location_LatLng_Latitude,
		"location.lat-lng.latitude",
		"the latitude in degrees",
	)
	var flag_Location_LatLng_Longitude protoflag.Double
	cmd.Flags().Var(
		&flag_Location_LatLng_Longitude,
		"location.lat-lng.longitude",
		"the longitude in degrees",
	)
	cmd.RunE = func(cmd *cobra.Command, args []string) error {
		var request CreateLocationRequest
		if cmd.Flags().Changed("from-file") {
			data, err := os.ReadFile(fromFile)
			if err != nil {
				return err
			}
			if err := protojson.Unmarshal(data, &request); err != nil {
				return err
			}
		}
		if cmd.Flags().Changed("parent") {
			r := request.ProtoReflect()
			r.Set(r.Descriptor().Fields().ByName("parent"), flag_Parent.ProtoReflectValue())
		}
		if cmd.Flags().Changed("location.display-name") {
			r := request.ProtoReflect()
			r = r.Mutable(r.Descriptor().Fields().ByName("location")).Message()
			r.Set(r.Descriptor().Fields().ByName("display_name"), flag_Location_DisplayName.ProtoReflectValue())
		}
		if cmd.Flags().Changed("location.address.reference-id") {
			r := request.ProtoReflect()
			r = r.Mutable(r.Descriptor().Fields().ByName("location")).Message()
			r = r.Mutable(r.Descriptor().Fields().ByName("address")).Message()
			r.Set(r.Descriptor().Fields().ByName("reference_id"), flag_Location_Address_ReferenceId.ProtoReflectValue())
		}
		if cmd.Flags().Changed("location.address.recipient") {
			r := request.ProtoReflect()
			r = r.Mutable(r.Descriptor().Fields().ByName("location")).Message()
			r = r.Mutable(r.Descriptor().Fields().ByName("address")).Message()
			r.Set(r.Descriptor().Fields().ByName("recipient"), flag_Location_Address_Recipient.ProtoReflectValue())
		}
		if cmd.Flags().Changed("location.address.co") {
			r := request.ProtoReflect()
			r = r.Mutable(r.Descriptor().Fields().ByName("location")).Message()
			r = r.Mutable(r.Descriptor().Fields().ByName("address")).Message()
			r.Set(r.Descriptor().Fields().ByName("co"), flag_Location_Address_Co.ProtoReflectValue())
		}
		if cmd.Flags().Changed("location.address.address-line1") {
			r := request.ProtoReflect()
			r = r.Mutable(r.Descriptor().Fields().ByName("location")).Message()
			r = r.Mutable(r.Descriptor().Fields().ByName("address")).Message()
			r.Set(r.Descriptor().Fields().ByName("address_line1"), flag_Location_Address_AddressLine1.ProtoReflectValue())
		}
		if cmd.Flags().Changed("location.address.address-line2") {
			r := request.ProtoReflect()
			r = r.Mutable(r.Descriptor().Fields().ByName("location")).Message()
			r = r.Mutable(r.Descriptor().Fields().ByName("address")).Message()
			r.Set(r.Descriptor().Fields().ByName("address_line2"), flag_Location_Address_AddressLine2.ProtoReflectValue())
		}
		if cmd.Flags().Changed("location.address.postal-code") {
			r := request.ProtoReflect()
			r = r.Mutable(r.Descriptor().Fields().ByName("location")).Message()
			r = r.Mutable(r.Descriptor().Fields().ByName("address")).Message()
			r.Set(r.Descriptor().Fields().ByName("postal_code"), flag_Location_Address_PostalCode.ProtoReflectValue())
		}
		if cmd.Flags().Changed("location.address.city") {
			r := request.ProtoReflect()
			r = r.Mutable(r.Descriptor().Fields().ByName("location")).Message()
			r = r.Mutable(r.Descriptor().Fields().ByName("address")).Message()
			r.Set(r.Descriptor().Fields().ByName("city"), flag_Location_Address_City.ProtoReflectValue())
		}
		if cmd.Flags().Changed("location.address.region-code") {
			r := request.ProtoReflect()
			r = r.Mutable(r.Descriptor().Fields().ByName("location")).Message()
			r = r.Mutable(r.Descriptor().Fields().ByName("address")).Message()
			r.Set(r.Descriptor().Fields().ByName("region_code"), flag_Location_Address_RegionCode.ProtoReflectValue())
		}
		if cmd.Flags().Changed("location.comment") {
			r := request.ProtoReflect()
			r = r.Mutable(r.Descriptor().Fields().ByName("location")).Message()
			r.Set(r.Descriptor().Fields().ByName("comment"), flag_Location_Comment.ProtoReflectValue())
		}
		if cmd.Flags().Changed("location.contacts") {
			r := request.ProtoReflect()
			r = r.Mutable(r.Descriptor().Fields().ByName("location")).Message()
			r.Set(r.Descriptor().Fields().ByName("contacts"), flag_Location_Contacts.ProtoReflectValue())
		}
		if cmd.Flags().Changed("location.external-reference-id") {
			r := request.ProtoReflect()
			r = r.Mutable(r.Descriptor().Fields().ByName("location")).Message()
			r.Set(r.Descriptor().Fields().ByName("external_reference_id"), flag_Location_ExternalReferenceId.ProtoReflectValue())
		}
		if cmd.Flags().Changed("location.lat-lng.latitude") {
			r := request.ProtoReflect()
			r = r.Mutable(r.Descriptor().Fields().ByName("location")).Message()
			r = r.Mutable(r.Descriptor().Fields().ByName("lat_lng")).Message()
			r.Set(r.Descriptor().Fields().ByName("latitude"), flag_Location_LatLng_Latitude.ProtoReflectValue())
		}
		if cmd.Flags().Changed("location.lat-lng.longitude") {
			r := request.ProtoReflect()
			r = r.Mutable(r.Descriptor().Fields().ByName("location")).Message()
			r = r.Mutable(r.Descriptor().Fields().ByName("lat_lng")).Message()
			r.Set(r.Descriptor().Fields().ByName("longitude"), flag_Location_LatLng_Longitude.ProtoReflectValue())
		}
		conn, err := cli.Dial(cmd.Context())
		if err != nil {
			return err
		}
		client := NewLocationServiceClient(conn)
		cli.LogRequest(cmd.Context(), &request)
		response, err := client.CreateLocation(cmd.Context(), &request)
		if err != nil {
			cli.LogError(cmd.Context(), err)
			os.Exit(1)
		}
		cli.LogResponse(cmd.Context(), response)
		return nil
	}
	return cmd
}
