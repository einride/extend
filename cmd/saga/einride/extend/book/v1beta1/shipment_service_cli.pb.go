// Code generated by protoc-gen-go-cli. DO NOT EDIT.
// versions:
// 	protoc        (unknown)
package bookv1beta1

import (
	cobra "github.com/spf13/cobra"
	cli "go.einride.tech/protoc-gen-go-cli/cli"
	protoflag "go.einride.tech/protoc-gen-go-cli/protoflag"
	protojson "google.golang.org/protobuf/encoding/protojson"
	os "os"
)

func NewShipmentServiceCommand(use string) *cobra.Command {
	cmd := &cobra.Command{
		Use:   use,
		Short: "this api represents a shipment service",
		Annotations: map[string]string{
			"type": "service",
		},
		PersistentPreRun: func(cmd *cobra.Command, _ []string) {
			cli.SetDefaultHost(cmd.Context(), "book.saga.einride.systems")
		},
	}
	cmd.AddCommand(newShipmentServiceListShipmentsCommand())
	cmd.AddCommand(newShipmentServiceCreateShipmentCommand())
	cmd.AddCommand(newShipmentServiceReleaseShipmentCommand())
	return cmd
}

func newShipmentServiceListShipmentsCommand() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "list-shipments",
		Short: "list shipments in a space",
	}
	var fromFile string
	cmd.Flags().StringVarP(&fromFile, "from-file", "f", "", "path to a JSON file containing request payload")
	_ = cmd.MarkFlagFilename("from-file", "json")
	var flag_Parent protoflag.String
	cmd.Flags().Var(
		&flag_Parent,
		"parent",
		"the resource name of the parent, which owns this collection of shipments",
	)
	var flag_PageSize protoflag.Int32
	cmd.Flags().Var(
		&flag_PageSize,
		"page-size",
		"requested page size",
	)
	var flag_PageToken protoflag.String
	cmd.Flags().Var(
		&flag_PageToken,
		"page-token",
		"a token identifying a page of results the server should return",
	)
	cmd.RunE = func(cmd *cobra.Command, args []string) error {
		var request ListShipmentsRequest
		if cmd.Flags().Changed("from-file") {
			data, err := os.ReadFile(fromFile)
			if err != nil {
				return err
			}
			if err := protojson.Unmarshal(data, &request); err != nil {
				return err
			}
		}
		if cmd.Flags().Changed("parent") {
			r := request.ProtoReflect()
			r.Set(r.Descriptor().Fields().ByName("parent"), flag_Parent.ProtoReflectValue())
		}
		if cmd.Flags().Changed("page-size") {
			r := request.ProtoReflect()
			r.Set(r.Descriptor().Fields().ByName("page_size"), flag_PageSize.ProtoReflectValue())
		}
		if cmd.Flags().Changed("page-token") {
			r := request.ProtoReflect()
			r.Set(r.Descriptor().Fields().ByName("page_token"), flag_PageToken.ProtoReflectValue())
		}
		conn, err := cli.Dial(cmd.Context())
		if err != nil {
			return err
		}
		client := NewShipmentServiceClient(conn)
		cli.LogRequest(cmd.Context(), &request)
		response, err := client.ListShipments(cmd.Context(), &request)
		if err != nil {
			cli.LogError(cmd.Context(), err)
			os.Exit(1)
		}
		cli.LogResponse(cmd.Context(), response)
		return nil
	}
	return cmd
}

func newShipmentServiceCreateShipmentCommand() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "create-shipment",
		Short: "create a shipment in a space",
	}
	var fromFile string
	cmd.Flags().StringVarP(&fromFile, "from-file", "f", "", "path to a JSON file containing request payload")
	_ = cmd.MarkFlagFilename("from-file", "json")
	var flag_Parent protoflag.String
	cmd.Flags().Var(
		&flag_Parent,
		"parent",
		"the resource name of the parent, which owns this collection of shipments",
	)
	var flag_Shipment_ExternalReferenceId protoflag.String
	cmd.Flags().Var(
		&flag_Shipment_ExternalReferenceId,
		"shipment.external-reference-id",
		"an external reference for this shipment",
	)
	cmd.RunE = func(cmd *cobra.Command, args []string) error {
		var request CreateShipmentRequest
		if cmd.Flags().Changed("from-file") {
			data, err := os.ReadFile(fromFile)
			if err != nil {
				return err
			}
			if err := protojson.Unmarshal(data, &request); err != nil {
				return err
			}
		}
		if cmd.Flags().Changed("parent") {
			r := request.ProtoReflect()
			r.Set(r.Descriptor().Fields().ByName("parent"), flag_Parent.ProtoReflectValue())
		}
		if cmd.Flags().Changed("shipment.external-reference-id") {
			r := request.ProtoReflect()
			r = r.Mutable(r.Descriptor().Fields().ByName("shipment")).Message()
			r.Set(r.Descriptor().Fields().ByName("external_reference_id"), flag_Shipment_ExternalReferenceId.ProtoReflectValue())
		}
		conn, err := cli.Dial(cmd.Context())
		if err != nil {
			return err
		}
		client := NewShipmentServiceClient(conn)
		cli.LogRequest(cmd.Context(), &request)
		response, err := client.CreateShipment(cmd.Context(), &request)
		if err != nil {
			cli.LogError(cmd.Context(), err)
			os.Exit(1)
		}
		cli.LogResponse(cmd.Context(), response)
		return nil
	}
	return cmd
}

func newShipmentServiceReleaseShipmentCommand() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "release-shipment",
		Short: "release shipment",
	}
	var fromFile string
	cmd.Flags().StringVarP(&fromFile, "from-file", "f", "", "path to a JSON file containing request payload")
	_ = cmd.MarkFlagFilename("from-file", "json")
	var flag_Name protoflag.String
	cmd.Flags().Var(
		&flag_Name,
		"name",
		"resource name of the shipment to release",
	)
	_ = cmd.RegisterFlagCompletionFunc(
		"name",
		cli.ResourceNameCompletionFunc(
			"spaces/{space}/shipments/{shipment}",
		),
	)
	cmd.RunE = func(cmd *cobra.Command, args []string) error {
		var request ReleaseShipmentRequest
		if cmd.Flags().Changed("from-file") {
			data, err := os.ReadFile(fromFile)
			if err != nil {
				return err
			}
			if err := protojson.Unmarshal(data, &request); err != nil {
				return err
			}
		}
		if cmd.Flags().Changed("name") {
			r := request.ProtoReflect()
			r.Set(r.Descriptor().Fields().ByName("name"), flag_Name.ProtoReflectValue())
		}
		conn, err := cli.Dial(cmd.Context())
		if err != nil {
			return err
		}
		client := NewShipmentServiceClient(conn)
		cli.LogRequest(cmd.Context(), &request)
		response, err := client.ReleaseShipment(cmd.Context(), &request)
		if err != nil {
			cli.LogError(cmd.Context(), err)
			os.Exit(1)
		}
		cli.LogResponse(cmd.Context(), response)
		return nil
	}
	return cmd
}
