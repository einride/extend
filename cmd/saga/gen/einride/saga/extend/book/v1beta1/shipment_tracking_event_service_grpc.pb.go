// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: einride/saga/extend/book/v1beta1/shipment_tracking_event_service.proto

package bookv1beta1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ShipmentTrackingEventServiceClient is the client API for ShipmentTrackingEventService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShipmentTrackingEventServiceClient interface {
	// Create a tracking event.
	//
	// This is an AIP standard [Create](https://google.aip.dev/133) method.
	CreateShipmentTrackingEvent(ctx context.Context, in *CreateShipmentTrackingEventRequest, opts ...grpc.CallOption) (*ShipmentTrackingEvent, error)
	// Get a shipment tracking event.
	//
	// This is an AIP standard [Get](https://google.aip.dev/131) method.
	GetShipmentTrackingEvent(ctx context.Context, in *GetShipmentTrackingEventRequest, opts ...grpc.CallOption) (*ShipmentTrackingEvent, error)
	// List shipment tracking events.
	//
	// See: https://google.aip.dev/132 (Standard methods: List).
	ListShipmentTrackingEvents(ctx context.Context, in *ListShipmentTrackingEventsRequest, opts ...grpc.CallOption) (*ListShipmentTrackingEventsResponse, error)
}

type shipmentTrackingEventServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShipmentTrackingEventServiceClient(cc grpc.ClientConnInterface) ShipmentTrackingEventServiceClient {
	return &shipmentTrackingEventServiceClient{cc}
}

func (c *shipmentTrackingEventServiceClient) CreateShipmentTrackingEvent(ctx context.Context, in *CreateShipmentTrackingEventRequest, opts ...grpc.CallOption) (*ShipmentTrackingEvent, error) {
	out := new(ShipmentTrackingEvent)
	err := c.cc.Invoke(ctx, "/einride.saga.extend.book.v1beta1.ShipmentTrackingEventService/CreateShipmentTrackingEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shipmentTrackingEventServiceClient) GetShipmentTrackingEvent(ctx context.Context, in *GetShipmentTrackingEventRequest, opts ...grpc.CallOption) (*ShipmentTrackingEvent, error) {
	out := new(ShipmentTrackingEvent)
	err := c.cc.Invoke(ctx, "/einride.saga.extend.book.v1beta1.ShipmentTrackingEventService/GetShipmentTrackingEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shipmentTrackingEventServiceClient) ListShipmentTrackingEvents(ctx context.Context, in *ListShipmentTrackingEventsRequest, opts ...grpc.CallOption) (*ListShipmentTrackingEventsResponse, error) {
	out := new(ListShipmentTrackingEventsResponse)
	err := c.cc.Invoke(ctx, "/einride.saga.extend.book.v1beta1.ShipmentTrackingEventService/ListShipmentTrackingEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShipmentTrackingEventServiceServer is the server API for ShipmentTrackingEventService service.
// All implementations should embed UnimplementedShipmentTrackingEventServiceServer
// for forward compatibility
type ShipmentTrackingEventServiceServer interface {
	// Create a tracking event.
	//
	// This is an AIP standard [Create](https://google.aip.dev/133) method.
	CreateShipmentTrackingEvent(context.Context, *CreateShipmentTrackingEventRequest) (*ShipmentTrackingEvent, error)
	// Get a shipment tracking event.
	//
	// This is an AIP standard [Get](https://google.aip.dev/131) method.
	GetShipmentTrackingEvent(context.Context, *GetShipmentTrackingEventRequest) (*ShipmentTrackingEvent, error)
	// List shipment tracking events.
	//
	// See: https://google.aip.dev/132 (Standard methods: List).
	ListShipmentTrackingEvents(context.Context, *ListShipmentTrackingEventsRequest) (*ListShipmentTrackingEventsResponse, error)
}

// UnimplementedShipmentTrackingEventServiceServer should be embedded to have forward compatible implementations.
type UnimplementedShipmentTrackingEventServiceServer struct {
}

func (UnimplementedShipmentTrackingEventServiceServer) CreateShipmentTrackingEvent(context.Context, *CreateShipmentTrackingEventRequest) (*ShipmentTrackingEvent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShipmentTrackingEvent not implemented")
}
func (UnimplementedShipmentTrackingEventServiceServer) GetShipmentTrackingEvent(context.Context, *GetShipmentTrackingEventRequest) (*ShipmentTrackingEvent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShipmentTrackingEvent not implemented")
}
func (UnimplementedShipmentTrackingEventServiceServer) ListShipmentTrackingEvents(context.Context, *ListShipmentTrackingEventsRequest) (*ListShipmentTrackingEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListShipmentTrackingEvents not implemented")
}

// UnsafeShipmentTrackingEventServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShipmentTrackingEventServiceServer will
// result in compilation errors.
type UnsafeShipmentTrackingEventServiceServer interface {
	mustEmbedUnimplementedShipmentTrackingEventServiceServer()
}

func RegisterShipmentTrackingEventServiceServer(s grpc.ServiceRegistrar, srv ShipmentTrackingEventServiceServer) {
	s.RegisterService(&ShipmentTrackingEventService_ServiceDesc, srv)
}

func _ShipmentTrackingEventService_CreateShipmentTrackingEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShipmentTrackingEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShipmentTrackingEventServiceServer).CreateShipmentTrackingEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/einride.saga.extend.book.v1beta1.ShipmentTrackingEventService/CreateShipmentTrackingEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShipmentTrackingEventServiceServer).CreateShipmentTrackingEvent(ctx, req.(*CreateShipmentTrackingEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShipmentTrackingEventService_GetShipmentTrackingEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShipmentTrackingEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShipmentTrackingEventServiceServer).GetShipmentTrackingEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/einride.saga.extend.book.v1beta1.ShipmentTrackingEventService/GetShipmentTrackingEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShipmentTrackingEventServiceServer).GetShipmentTrackingEvent(ctx, req.(*GetShipmentTrackingEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShipmentTrackingEventService_ListShipmentTrackingEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListShipmentTrackingEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShipmentTrackingEventServiceServer).ListShipmentTrackingEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/einride.saga.extend.book.v1beta1.ShipmentTrackingEventService/ListShipmentTrackingEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShipmentTrackingEventServiceServer).ListShipmentTrackingEvents(ctx, req.(*ListShipmentTrackingEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShipmentTrackingEventService_ServiceDesc is the grpc.ServiceDesc for ShipmentTrackingEventService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShipmentTrackingEventService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "einride.saga.extend.book.v1beta1.ShipmentTrackingEventService",
	HandlerType: (*ShipmentTrackingEventServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateShipmentTrackingEvent",
			Handler:    _ShipmentTrackingEventService_CreateShipmentTrackingEvent_Handler,
		},
		{
			MethodName: "GetShipmentTrackingEvent",
			Handler:    _ShipmentTrackingEventService_GetShipmentTrackingEvent_Handler,
		},
		{
			MethodName: "ListShipmentTrackingEvents",
			Handler:    _ShipmentTrackingEventService_ListShipmentTrackingEvents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "einride/saga/extend/book/v1beta1/shipment_tracking_event_service.proto",
}
